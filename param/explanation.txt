"""Explanation for old files"""namb is ncore. It is the central density of cloudnavg is the average density of cloud; used when alpha = 0 (actually, it isused for calculations such as tff when we are using non-homogeneous density profile for the cloud.)rcore_au is just  warpfield_params.rCore    > warpfield_params.nCore * warpfield_params.mu_n * (u.g/u.cm**3).to(u.M_sun/u.pc**3)n_intercl is nISM# boltzmann constant in astronomical units k_B = c.k_B.cgs.value * u.g.to(u.Msun) * u.cm.to(u.pc)**2 / u.s.to(u.Myr)**2rhoa_au = RHOA = warpfield_params.nCore * warpfield_params.mu_n * (u.g/u.cm**3).to(u.M_sun/u.pc**3)i.rhoa = namb * mui =  warpfield_params.nCore * warpfield_params.mu_nRCORE = warpfield_params.rCoreGrav_au = c.G.to(u.pc**3/u.M_sun/u.Myr**2).value i.cf_min is now in calc_coveringf() in energy_phase_ODEi.mua = warpfield_params.mu_pi.mui = warpfield_params.mu_ni.navg = warpfield_params.dens_navg_pLi.nalpha = warpfield_params.dens_a_pLi.density_gradient is now in warpfield_params.density_gradient read_param.  clight_au = c.c.to(u.pc/u.Myr).valuec.Msun = c.M_sun.cgs.valuec.kms = ( u.km/u.s).to(u.cm/u.s)c.Myr = u.Myr.to(u.s)c.pc = c.pc.cgs.valuec.Grav = c.G.cgs.valuec.kboltz = c.k_B.cgs.valuec.L_cgs = (u.g.to(u.Msun) * u.cm.to(u.pc)**2/u.s.to(u.Myr)**3)myc.gamma = warpfield_params.gamma_adiai.Zism = warpfield_params.metallicityi.ndiss = warpfield_params.stop_n_dissi.Ti = warpfield_params.t_ioni.tStop = warpfield_params.stop_t, both of whith is being updated depending on if    the units are in Myr or in tff. In warpfield tStop is originally tStop_tmp    before all the calculation of units.i.rstop = warpfield_params.stop_ri.Z_nodust = warpfield_params.z_nodusti.Weav_grav = warpfield_params.inc_gravi.rcoll = warpfield_params.r_colli.mult_exp = warpfield_params.mult_expi.Emin = warpfield_params.phase_Emini.BMW0 = warpfield_params.BMW0i.nMW0 = warpfield_params.nMW0i.gmag = warpfield_params.gamma_magi.SB99_age_min = warpfield_params.SB99_age_mini.frag_c = warpfield_params.frag_grav_coeffi.frag_t_iter = warpfield_params.frag_enable_timescalei.ndiss = warpfield_params.stop_n_dissi.dt_min_diss = warpfield_params.stop_t_dissi.cf_end = warpfield_params.frag_cf_endi.gravfrag_burst = frag_gravi.RT_burst = frag_RTinstabi.inhomfrag_burst = frag_densInhomi.frag_cover = warpfield_params.frag_enabledi.r_Tb = warpfield_params.xi_Tbi.mult_SF = warpfield_params.mult_SFi.tff = warpfield_params.tffi.SFE_ff = warpfield_params.sfe_tff# This is now being stored in ODEpar!density_specific_param = ODEpar['density_specific_param']#  ODEpar['density_specific_param'] added.#  ODEpar['gamma'] = myc.gamma removed.#  ODEpar['Mcloud_au'] = Mcloud_au renamed to ODEpar['mCloud'] = mCloud#  ODEpar['Rcloud_au'] = rcloud_au renamed to ODEpar['rCloud'] = rCloud#  ODEpar['Rcore_au'] = Rcore_au renamed to ODEpar['rCore'] = rCore#  ODEpar['Mcluster_au'] = Mcluster_au renamed to ODEpar['mCluster'] = mCluster#  ODEpar['nalpha'] = i.nalpha removed.#  ODEpar['SFE'] = SFE removed.#  ODEpar['rhocore_au'] = i.rhoa_au removed, because i.rhoa_au is rhoCore, and it can be calculated from scratch. warpfield_params.write_bubble_CLOUDY or i.write_cloudy is removed. # minimum time span during which the max density of shell has to fall below ndiss, in order to warrant stoppage of simulation (Myr)dt_min_diss = 2.0# get parameterfrom src.input_tools import get_paramwarpfield_params = get_param.get_param()-------------directories-------------calc_ionpress = Mom_phase() in phase_solver2.py is never used. The file phase_momentum is instead used. aux.check_continue = set_phase.check_simulation_statusODE_tot_aux.fE_tot_part1 = phase_ODEs.fE_tot_part1my_events = phase_eventsget_startvalues.make_new_cluster = get_InitNewCluster.make_new_cluster