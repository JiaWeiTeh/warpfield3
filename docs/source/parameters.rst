.. highlight:: rest.. _sec-parameters:Parameter Specificaâ€ ions========================Creating the parameter file---------------------------This section documents how one can create and format parameter files (``*.param``). Here are some basic rules:* Most parameters have default values (given in ``[]`` below). If a parameter is not specified in the parameter file, the default parameter-value pair will be assumed.* The parameters need not be specified in order. * Some parameters will only run under certain conditions; if the conditions are not met, these parameters will be ignored. These conditions, if present, are documented below.* Lines beginning with ``#`` in the ``.param`` file will be ignored. * One can specify parameters in the file using the following syntax:.. code-block:: console    parameter1    value1    parameter2    value2    ...           .. _ssec-basic-params:    Basic parameters----------------These sets the basic parameters for the run.* ``model_name [WARPFIELD_DEFAULT]``: The model name. This sets the prefix for all output filenames. WARNING: Do not include spaces.* ``out_dir [def_dir]``: The directory for output files. This is the absolute path in which output files will be stored. The default directory is the root directory in which WARPFIELD is being run.* ``verbose [1]``: The output intensity level in terminal. ``1`` for minimal output, ``2`` for basic output, and ``3`` for everything. * ``output_format [ASCII]``: The output format. In the future we will implement options for FITS files.Main parameters for WARPFIELD -----------------------------These are the main parameters which WARPFIELD depends on. * ``rand_input [0]``: Enable random input parameters? ``1`` to enable randomiser, ``0`` to disable. If ``1``, WARPFIELD will generate randomised inputs of ``log_mCloud``, ``sfe``, ``nCore``, and ``metallicity``. The user must then define the limits of the randomiser:    * ``rand_log_mCloud [5,7.47]``: Log cloud mass (unit: solar mass)    * ``rand_sfe [0.01, 0.10]``: Star formation effeciency    * ``rand_n_cloud [100, 1000]``: Number density of cloud core (unit: cm\ :math:`^{-3}`)    * ``rand_metallicity [0.15, 1]``: Cloud metallicity (unit: solar metallicity, :math:`Z_\odot`)* ``log_mCloud [6.0]``:  Log cloud mass (unit: solar mass). This will be the initial mass of the molecular cloud. This parameter is ignored if ``rand_input`` is set to ``1``.    * ``mCloud_beforeSF [1]``: Is ``log_mCloud`` given as mass before or after cluster formation? ``0`` indicates after star formation, and ``1`` indicates indicates before.* ``sfe [0.01]``: Star formation effeciency (``0 < sfe < 1``). This sets the fraction of cloud mass that is converted into the mass of the initial star cluster. This parameter is ignored if ``rand_input`` is set to ``1``.* ``nCore [1000]``: Number density of cloud core (unit: cm\ :math:`^{-3}`). This parameter is ignored if ``rand_input`` is set to ``1``.* ``metallicity [1]``: Cloud metallicity (unit: solar metallicity, :math:`Z_\odot`). Currently available values are 1 :math:`Z_\odot` and 0.15 :math:`Z_\odot`. This parameter is ignored if ``rand_input`` is set to ``1``.* ``stochastic_sampling [0]``: Include stochastic sampling of IMF in the creation of initial cluster? If set to ``1``, apply scaling relations when computing cluster properties assuming that the IMF is fully sampled. This parameter is ignored if ``rand_input`` is set to ``1``.Parameters for the density profile of the cloud-----------------------------------------------This section sets the density profile, :math:`\rho(r)` , of the cloud.* ``dens_profile [bE_prof]``: How does the density scale with radius?        * ``bE_prof``: Bonnor-Ebert sphere profile (`Ebert 1955 <https://ui.adsabs.harvard.edu/abs/1955ZA.....37..217E/abstract>`_; `Bonnor 1956 <https://ui.adsabs.harvard.edu/abs/1956MNRAS.116..351B/abstract>`_).        * ``dens_g_bE [14.1]``: If Bonnor-Ebert is selected, then the user must also define the parameter :math:`g_{BE} = \frac{rho_{\rm centre}}{rho\_{\rm edge}}`, such that all clouds exceeding this value are gravitationally unstable. The corresponding mass is the critical mass known as the Bonner-Ebert mass (see `Stahler and Palla 2004 <https://ui.adsabs.harvard.edu/abs/2004fost.book.....S/abstract>`_).     * ``pL_prof``: Power-law profile. Setting ``dens_a_pL = 0`` (see below) gives a homogeneous cloud, whereas ``dens_a_pL = -2`` gives an isothermal sphere.         * ``dens_a_pL [-2]``: If power-law is selected, then the user must also define the power-law coefficient :math:`\alpha`, which takes value between :math:`-2\leq\alpha<0` and is defined as the following:.. math:: \rho_{\rm cloud}(r) = \left\{\begin{array}{lll} \rho_0 , & r \leq r_{\rm core} \\ rho_0 \times (r / r_{\rm core})^\alpha, & r_{\rm core} < r \leq r_{\rm cloud} \\ \rho_{\rm ambISM}, & r > r_{\rm cloud} \end{array} \right.        * ``dens_navg_pL [170]``: The average number density of the cloud (unit: cm\ :math:`^{-3}`).