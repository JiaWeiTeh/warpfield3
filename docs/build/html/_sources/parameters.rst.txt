.. highlight:: rest.. _sec-parameters:Parameter Specifications========================Creating the parameter file---------------------------This section documents how one can create and format parameter files (``*.param``). Here are the basic rules:* Most parameters have default values (given in ``[]`` below). If a parameter is not specified in the parameter file, the default parameter-value pair will be assumed.* The parameters need not be specified in order. * Some parameters will only take effect under certain conditions; if the conditions are not satisfied, the parameters will be ignored.* Lines beginning with ``#`` in the ``.param`` file are treated as comments and are ignored. * One can specify parameters in the file using the following syntax:.. code-block:: console    parameter1    value1    parameter2    value2    ...           .. _ssec-basic-params:    Basic parameters----------------These set the basic parameters for the run.* ``model_name [WARPFIELD_DEFAULT]``: The model name. This sets the prefix for all output filenames. WARNING: Do not include spaces.* ``out_dir [def_dir]``: The directory for output files. This is the absolute path in which output files will be stored. The default directory is the root directory in which WARPFIELD is being run.* ``verbose [1]``: The output intensity level in terminal. ``1`` for minimal output, ``2`` for basic output, and ``3`` for everything. * ``output_format [ASCII]``: The output format. In the future we will implement options for FITS files.Main parameters for WARPFIELD ------------------------------These are the main parameters which WARPFIELD depends on. * ``rand_input [0]``: Enable random input parameters? ``1`` to enable randomiser, ``0`` to disable. If ``1``, WARPFIELD will generate randomised inputs of ``log_mCloud``, ``sfe``, ``nCore``, and ``metallicity``. The user must then define the limits of the randomiser:    * ``rand_log_mCloud [5, 7.47]``: Log cloud mass (unit: :math:`M_\odot`)    * ``rand_sfe [0.01, 0.10]``: Star formation effeciency    * ``rand_n_cloud [100, 1000]``: Number density of cloud core (unit: cm\ :math:`^{-3}`)    * ``rand_metallicity [0.15, 1]``: Cloud metallicity (unit: :math:`Z_\odot`)* ``log_mCloud [6.0]``:  Log cloud mass (unit: :math:`M_\odot`). This will be the initial mass of the molecular cloud. This parameter is ignored if ``rand_input`` is set to ``1``.* ``mCloud_beforeSF [1]``: Is ``log_mCloud`` given as mass before or after cluster formation? ``0`` indicates after star formation, and ``1`` indicates indicates before.* ``sfe [0.01]``: Star formation effeciency (``0 < sfe < 1``). This sets the fraction of cloud mass that is converted into the mass of the initial star cluster. This parameter is ignored if ``rand_input`` is set to ``1``.* ``nCore [1000]``: Number density of cloud core (unit: :math:`Z_\odot`). This parameter is ignored if ``rand_input`` is set to ``1``.* ``metallicity [1]``: Cloud metallicity (unit: :math:`Z_\odot`). Currently available values are 1 :math:`Z_\odot` and 0.15 :math:`Z_\odot`. This parameter is ignored if ``rand_input`` is set to ``1``.* ``stochastic_sampling [0]``: Include stochastic sampling of IMF in the creation of initial cluster? If set to ``1``, apply scaling relations when computing cluster properties assuming that the IMF is fully sampled. This parameter is ignored if ``rand_input`` is set to ``1``.* ``n_trials``: How many iterations / how many SLUG cluster do you want to create? This parameter is ignored if ``stochastic_sampling`` is set to ``0``. As a rule of thumb we suggest   .. math:: {\rm n\_trails} \sim 10^6/{\rm mCluster} \sim 10^6/({\rm mCloud} \times {\rm sfe})  In other words, for high mass clusters where we expect fully sampled IMF, there is no need for a lot of iterations; conversely, for low mass clusters where stochasticity is important, we require more iterations for better understanding of the distribution of outputs (such as the ionising luminosity).Parameters for the density profile of the cloud-----------------------------------------------This section sets the density profile, :math:`\rho(r)`, of the cloud.* ``dens_profile [bE_prof]``: How does the density scale with radius? Available parameters:        * ``bE_prof``: Bonnor-Ebert sphere profile (see `Ebert 1955 <https://ui.adsabs.harvard.edu/abs/1955ZA.....37..217E/abstract>`_; `Bonnor 1956 <https://ui.adsabs.harvard.edu/abs/1956MNRAS.116..351B/abstract>`_).        * ``dens_g_bE [14.1]``: If Bonnor-Ebert is selected, then the user must also define the parameter :math:`g_{\rm BE} = \frac{\rho_{\rm centre}}{\rho_{\rm edge}}`, such that all clouds exceeding this value are gravitationally unstable. The corresponding mass is the critical mass known as the Bonner-Ebert mass (e.g., see `Stahler and Palla 2004 <https://ui.adsabs.harvard.edu/abs/2004fost.book.....S/abstract>`_).     * ``pL_prof``: Power-law profile. Setting ``dens_a_pL = 0`` (see below) gives a homogeneous cloud, whereas ``dens_a_pL = -2`` gives an isothermal sphere.         * ``dens_a_pL [-2]``: If power-law is selected, then the user must also define the power-law coefficient :math:`\alpha`, which takes value between :math:`-2\leq\alpha<0`. Suppose that :math:`r_0` is the core radius, :math:`\rho_0` is the core density, and :math:`\rho_{\rm ambISM}` is the density of the ISM, then :math:`\alpha` is defined such that:        .. math:: \rho_{\rm cloud}(r) = \left\{\begin{array}{lll} \rho_0 , & r \leq r_0 \\ \rho_0 \times (r / r_0)^\alpha, & r_0 < r \leq r_{\rm cloud} \\ \rho_{\rm ambISM}, & r > r_{\rm cloud} \end{array} \right.        * ``dens_navg_pL [170]``: If power-law is selected, then the user must also define the average number density of the cloud (unit: cm\ :math:`^{-3}`).                       Other parameters----------------Here, we provide users the ability to adjust values of these parameters;however, these are (mostly) standard constants and are rarely being changed. Unless necessary, they should be kept at default.* ``mu_n [2.1287915392418182e-24]``: The mean mass per nucleus (unit: g). We assume the standard composition of 1 He atom every 10 H atoms. By default, :math:`\mu_{\rm n} = (14/11)m_{\rm H}`.* ``mu_p [1.0181176926808696e-24]``: The mean mass per particle (unit: g). We assume the standard composition of 1 He atom every 10 H atoms. By default, :math:`\mu_{\rm p} = (14/23)m_{\rm H}`.* ``nISM [10]``: The number density of the ambient ISM (unit: cm\ :math:`^{-3}`).       * ``t_ion [1e4]``: Temperature of ionised region (unit: K).* ``t_neu [1e2]``: Temperature of neutral region (unit: K).* ``sigma0 [1.5e-21]``: Dust cross-section at solar metallicity (unit: cm\ :math:`^2`). Thus for other metallicities the dust cross section is scaled as :math:`\sigma_d = \sigma_0 * (Z/Z_\odot)`.* ``z_nodust [0.05]``: Metallicity below which there is effectively no dust, i.e., :math:`\sigma_d = 0` (unit: :math:`Z_\odot`). * ``gamma_adia [1.6666666666666667]``: The adiabatic index (:math:`\gamma_{\rm adia} = 5/3`).* ``gamma_mag [1.3333333333333333]``: The effective magnetic adiabatic index (:math:`\gamma_{\rm mag} = 4/3`). Setting to ``0`` implies a constant magnetic field strength throughout the model, whereas ``4/3`` implies conservation of magnetic flux and is what would be expected in the absence of dynamo action or magnetic reconnection (sphere). See `Henney et al 2005 <https://ui.adsabs.harvard.edu/abs/2005ApJ...621..328H/abstract>`_, Appendix C.* ``alpha_B [2.59e-13]``: The case B recombination coefficient (unit: cm\ :math:`^{3}`/s). See `Osterbrock and Ferland 2006 <https://ui.adsabs.harvard.edu/abs/2006agna.book.....O/abstract>`_.     * ``kappa_IR [4]``: The Rosseland mean dust opacity :math:`\kappa_{\rm IR}` (unit: cm\ :math:`^{2}`/g). For simplicity we do not include the dependency of :math:`\kappa_{\rm IR}` wish dust temperature, but adopt a constant value. This parameter relates to the calculation of :math:`\tau_{\rm IR}`, the optical depth of the shell in the IR by: .. math:: \tau_{\rm IR} = \kappa_{\rm IR} \int \mu_n n_{\rm sh} {\rm d}r